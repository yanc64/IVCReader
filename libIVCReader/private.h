//// iView Libraries - Catalog Data Types// Copyright 2001-2006 iView Multimedia Ltd. All rights reserved.//#ifndef __ICLTYPES__#define __ICLTYPES__#pragma once#include <MacTypes.h>//////////////////////////////////////////////////////////////////////////////////////////////////#pragma mark -  CONSTANTS, Macros// Chunk Markers#define kCatalogFileFormat 		'025i'#define kCatalogUserFieldsTag 	'USF3'#define kCatalogFSMTag 			'FSM!'#define kCatalogMorselsTag		'CMRS'#define kCatalogCellListTag 	'CELL'// IPTC type byte#define kIPTCEncoding_TEXT		0x1C#define kIPTCEncoding_UTF8		0x1D// Macros#define FourCC2Str(code)		(char[5]){(code >> 24) & 0xFF, (code >> 16) & 0xFF, (code >> 8) & 0xFF, code & 0xFF, 0}// Limits//#define kMaxFolderSize		2048//#define kScratchBuffer		10240L//#define kMaxCatalogItemsPro	128000L//#define kMaxCatalogItems		8000L//////////////////////////////////////////////////////////////////////////////////////////////////#pragma mark - Data Structures////typedef struct{	unsigned char	legacy_path[256];	// Pascal string: file path (NB MacRoman encoding on disk, native encoding in RAM)	unsigned char	legacy_name[64];	// Pascal string: file name (NB MacRoman encoding on disk, native encoding in RAM)	SInt32 			importTicks;		// number of ticks taken to import the file	UInt8			unused_1[8];	UInt32			type;				// file type	UInt8			show[16];			// slide show options	SInt32			fileSize;			// file size (data+resource)	SInt32			width;				// spatial width	SInt32			height;				// spatial height	SInt32			resolution;			// spatial resolution	SInt32			sampleColor;		// item's prominant color	SInt32			depth;				// spatial depth	UInt8			legacy_alias[452];	// file alias (used in earlier versions of iview)	UInt8			unused_2[2];	UInt16			rotate;				// one of 'H ','V ','HV','W ','CW'	UInt32			archived;			// catalog date	UInt32			created;			// file creation date	UInt32			modified;			// file modification date	SInt32			pages;				// number of image layers/pages	SInt32			poster;				// time value for thumbnail	SInt32			tracks;				// number of tracks	SInt32			duration;			// total duration of movie/sound	SInt32			channels;			// maximum number of sound channels in a single track	SInt32			sampleRate;			// maximum sound sample rate in a single track	SInt32			sampleSize;			// maximum sound bit size in a single track		UInt32			annotated;			// file annotation date - archived updates when iptc is edited	SInt32			avDataRate;			// sum of all track data rates in UInt8s per second	SInt32			vdFrameRate;		// lower track rate in frames per millisecond	SInt32			vdQuality;			// lower track video rate (video only)	UInt8			unused_3[32];	UInt32			colorSpace;	SInt32			compression;	unsigned char	encoding[32];		// Pascal string	unsigned char	colorProfile[32];	// Pascal string	SInt32			textCharacters;	SInt32			textParagraphs;	SInt32			scratch;		// temporary scratch buffer - 0 when saved	// metadata blocks	SInt32			talkSize;		// size of voice 'snd' recording	SInt32			metaSize;		// size of read only atom formatted metadata	SInt32			pictSize;		// size of pict preview	SInt32			iptcSize;		// size of editable 'iptc' formatted data	SInt32			urlfSize;		// size of attached URL} ItemInfo;// values are native endian// therefore we could assign the datatype when we read the valuetypedef struct{	UInt32 		tag;	UInt32 		len;	void *		buf;	UInt8 		enc, dec, un1, un2;} CacheAtom;typedef struct {	UInt32 		uniqueID;	ItemInfo 	info;	CacheAtom *	atomArray; 	UInt32 		atomCount;} RecordCache;typedef struct{	unsigned short	tag;	unsigned short len;} fip; // flattenned iptc data formattypedef struct{	SInt32 len;	SInt32 tag;	char buf[1];} fud; // flattenned user data formatenum LinkedListMarkers { kListStart = 1, kNodeStart = 2, kListEnd	= 3, kNodeEnd = 4 };typedef char *(*ListUnflattenProc)(char *path, void *data, UInt32 size);/////typedef struct CellInfoFlags{	unsigned label	  	:4;				// label (0-15 max 9)	unsigned rating	  	:4;				// rating (0-15 max 5)	unsigned unused	    :16;	unsigned lastimport	:1;				// item has just been imported - saved	unsigned intemp		:1;				// item needs to be rebuild - saved	unsigned hidden		:1;				// set/used only when creating hidden records : 0 at open	unsigned inscratch	:1;				// entry updated: 0 at open	unsigned bit_5		:1;				// unused	unsigned bit_6		:1;				// unused	unsigned bit_7		:1;				// unused	unsigned bit_8		:1;				// unused} CellInfoFlags;typedef struct CellInfo{	UInt32			catoffset;			// offset in scratch catalog	UInt32			uniqueID;			// unique item ID	CellInfoFlags   flags;				// cell flags} CellInfo;/* * On disk, using big-endian format, we have: * *	--	0) 'fldr' tag										[SInt32] -- *		1) skip bytes to skip this record					[SInt32] *	    2) unicode name length								[SInt32] *		3) legacy name length								[SInt32] *		4) alias length										[SInt32] *		5) number of items in the catalog from this folder	[SInt32]	   > fixed size header *		6) number of subfolders on disk						[SInt32] *		7) flags											[SInt32] *		8) parent folder block offset						[SInt32] *	--	9) script reference block offset					[SInt32] -- * 10) unicode name										[variable length, bytes] * 11) legacy name										[variable length, bytes] * 11) alias											[variable length, bytes] * 12) list of item uids								[variable length, SInt32s] * 13) filename lengths									[variable length, SInt32s] * 14) unicode filenames								[variable length, bytes] * 15) subfolder block offsets							[variable length, SInt32s] * * Similarly, script definitions will be prefixed thus * *	--	0) 'scpt' tag										[SInt32] -- * 		1) skip bytes										[SInt32] * */typedef struct folder_structure_header{	SInt32 modern_name_length;	SInt32 legacy_name_length;	SInt32 alias_length;	SInt32 num_items;	SInt32 num_subfolders;	SInt32 flags;	SInt32 parent_folder_offset;	SInt32 script_ref_offset;} folder_structure_header;typedef struct data_chunk_header{	SInt32 tag;	SInt32 skip_bytes;} data_chunk_header;////////////////////////////////////////////////////////////////////////////////////////////////////																								//// MetaTags																						////																								////////////////////////////////////////////////////////////////////////////////////////////////////#pragma mark - Metadata Tagsenum MetaTags{	// Media Fields ..............................//	kPathnameField				= 0x00000001,//	kFilenameField				= 0x00000002,//	kDisknameField				= 'VNam',//	kFileTypeNameField			= 0x00000003,//	kFileTypeField				= 0x00000004,//	kFileSizeField				= 0x00000005,//	kWidthField					= 0x00000006,//	kHeightField				= 0x00000007,//	kResolutionField			= 0x00000008,//	kDepthField					= 0x00000009,//	kAddedField					= 0x0000000A,//	kCreatedField				= 0x0000000B,//	kModifiedField				= 0x0000000C,//	kPagesField					= 0x0000000D,//	kPosterField				= 0x0000000E,//	kTracksField				= 0x0000000F,//	kDurationField				= 0x00000010,//	kChannelsField				= 0x00000011,//	kSampleRateField			= 0x00000012,//	kSampleSizeField			= 0x00000013,//	kMovieQualityField			= 0x00000014,//	kColorSpaceField			= 0x00000015,//	kCompressionField			= 0x00000016,//	kEncodingField				= 0x00000017,//	kColorProfileField			= 0x00000018,//	kCharactersField			= 0x00000019,//	kParagraphsField			= 0x0000001A,//	kSampleColorField			= 0x0000001B,//	kTalkHSizeField				= 0x0000001C,//	kMetaHSizeField				= 0x0000001D,//	kPictHSizeField				= 0x0000001E,//	kIptcHSizeField				= 0x0000001F,//	kUrlfHSizeField				= 0x00000020,//	kAnnotatedField				= 0x00000021,//	kMovieDataRateField			= 0x00000022,//	kMovieFrameRateField		= 0x00000023,	kINFOURLSourceField			= 0x000000B4,		// Merged Fields .............................//	kMergedDimensionsField		= 0x00000041,//	kMergedMediaTypeField		= 0x00000042,//	kMergedMakerModelField		= 0x00000043,//	kUniqueIDField				= 0x00000044,//	kOrientationField			= 0x00000045,//	kMergedExifField			= 0x00000046,//	kASCIICaptureDateField		= 0x00000047,//	kMergedGeographyField		= 0x00000048,//	kMergedDateField			= 0x000000A1,	kCatalogSetField			= 0x000000A2,//	kMergedLatitudeField		= 'LATD',//	kMergedLongitudeField		= 'LOTD',//	kMergedAltitudeField		= 'ALTD',			// IPTC ..............	kIPTCTitleField				= 0x00000205,	//	 1		photoshop:Title									kUserDataTextProduct | kUserDataTextAlbum (mp3)	kIPTCStatusField			= 0x00000207,	//   2		mediapro:Status									kUserDataTextDisclaimer	kIPTCSubjectReferenceField	= 0x0000020C,	// R 3		Iptc4xmpCore:SubjectCode						-	kIPTCPrimaryCategoryField	= 0x0000020F,	//	 1		photoshop:Category								kUserDataTextGenre	kIPTCCategoryField			= 0x00000214,	// R 1		photoshop:SupplementalCategories				-	kIPTCKeywordField			= 0x00000219,	// R 1		photoshop:Keywords								kUserDataTextKeywords	kIPTCCountryCodeField		= 0x00000226,	//	 3		Iptc4xmpCore:CountryCode						-	kIPTCInstructionsField		= 0x00000228,	// L 1		photoshop:Instructions							kUserDataTextSpecialPlaybackRequirements	kIPTCEventDateField			= 0x00000237,	//	 1		photoshop:DateCreated							kUserDataTextCreationDate	kIPTCCreatorField			= 0x00000250,	//	 1		photoshop:Author								kUserDataTextAuthor | kUserDataTextOriginalArtist | kUserDataTextArtist (mp3)	kIPTCCreatorTitleField		= 0x00000255,	//	 1		photoshop:AuthorsPosition						-	kIPTCCityField				= 0x0000025A,	//	 1		photoshop:City									-	kIPTCStateField				= 0x0000025F,	//	 1		photoshop:State									-	kIPTCCountryField			= 0x00000265,	//	 1		photoshop:Country								-	kIPTCTransmissionField		= 0x00000267,	// L 1		photoshop:TransmissionReference					-	kIPTCHeadlineField			= 0x00000269,	// L 1		photoshop:Headline								kUserDataTextInformation | kUserDataTextFullName	kIPTCCreditField			= 0x0000026E,	//	 1		photoshop:Credit								kUserDataTextProducer	kIPTCSourceField			= 0x00000273,	//	 1		photoshop:Source								kUserDataTextOriginalSource	kIPTCCopyrightField			= 0x00000274,	// L 1		photoshop:Copyright								kUserDataTextCopyright	kIPTCCaptionField			= 0x00000278,	// L 1		photoshop:Caption								kUserDataTextComment	kIPTCCaptionWriterField		= 0x0000027A,	//	 1		photoshop:CaptionWriter							kUserDataTextWriter	kIPTCEventField				= 0x00000216,	//	 2		mediapro:Event									kUserDataTextDescription	kIPTCPeopleField			= 0x00000276,	// R 2		mediapro:People									kUserDataTextPerformers	kIPTCLocationField			= 0x0000025C,	//	 2		Iptc4xmpCore:Location							-	kIPTCCreatorAddressField	= 0x000002D0,	// L 3		Iptc4xmpCore:CreatorContactInfo/CiAdrExtadr		-	kIPTCCreatorCityField		= 0x000002D1,	//	 3		Iptc4xmpCore:CreatorContactInfo/CiAdrCity		-	kIPTCCreatorStateField		= 0x000002D2,	//	 3		Iptc4xmpCore:CreatorContactInfo/CiAdrRegion		-	kIPTCCreatorPostcodeField	= 0x000002D3,	//	 3		Iptc4xmpCore:CreatorContactInfo/CiAdrPcode		-	kIPTCCreatorCountryField	= 0x000002D4,	//	 3		Iptc4xmpCore:CreatorContactInfo/CiAdrCtry		-	kIPTCCreatorPhoneField		= 0x000002D5,	// L 3		Iptc4xmpCore:CreatorContactInfo/CiAdrTelWork	-	kIPTCCreatorEmailField		= 0x000002D6,	// L 3		Iptc4xmpCore:CreatorContactInfo/CiEmailWork		-	kIPTCCreatorURLField		= 0x000002D7,	// L 3		Iptc4xmpCore:CreatorContactInfo/CiUrlWork		-	kIPTCSceneField				= 0x000002E0,	// R 3		Iptc4xmpCore:Scene								-	kIPTCIntellectualGenreField	= 0x000002E1,	//   3		Iptc4xmpCore:IntellectualGenre					-	kIPTCUsageTermsField		= 0x000002E2,	//   3		xapRights:UsageTerms/*[@xml:lang=\'x-default\']	-	kIPTCURLField				= 0x000002E3,	// L 3		photoshop:WebStatement							-		// Fields used for import/export, not saved in IPTC block ----------------------------------	kIPTCLabelField				= 0x0000020A,	//	 1		photoshop:Urgency								- (0|1|2|3|4|5|6|7|8|9) - photohop goes up to 7	kIPTCRatingField			= 0x000002F2,	//   3		xap:Rating										- (0|1|2|3|4|5|6|7|8|9) - photohop goes up to 5//	kIPTCUFListField			= 0x000002FE,	// R 3		mediapro:UserFields								-//	kIPTCSetListField			= 0x000002FF,	// R 3		mediapro:CatalogSets							-	// User Fields ...............................	kUser01Field				= 0x00000301,	kUser02Field				= 0x00000302,	kUser03Field				= 0x00000303,	kUser04Field				= 0x00000304,	kUser05Field				= 0x00000305,	kUser06Field				= 0x00000306,	kUser07Field				= 0x00000307,	kUser08Field				= 0x00000308,	kUser09Field				= 0x00000309,	kUser10Field				= 0x0000030A,	kUser11Field				= 0x0000030B,	kUser12Field				= 0x0000030C,	kUser13Field				= 0x0000030D,	kUser14Field				= 0x0000030E,	kUser15Field				= 0x0000030F,	kUser16Field				= 0x00000310,		// Saved property fields .............	kEXIFMakerField				= 0xA96D616B, // n ASCIIs	kEXIFModelField				= 0xA96D6F64, // n ASCIIs	kEXIFSoftwareField			= 0xA9737772, // n ASCIIs	kEXIFFormatField			= 0xA9666D74, // n ASCIIs	// EXIF ISO fields ..........................	kEXIFVersionField			= 0x65789000, // 1 OSTYPE	kEXIFCaptureDateField		= 0x65789003, // 20 ASCIIs	kEXIFProgramField			= 0x65788822, // 1 SHORT	kEXIFISOSpeedField			= 0x65788827, // 1 SHORT - The EXIF standard specifies several entries for this field. We keep the first non-zero entry.	kEXIFExposureBiasField		= 0x65789204, // 1 RATIONAL	kEXIFShutterSpeedField		= 0x6578829A, // 1 RATIONAL	kEXIFApertureField			= 0x6578829D, // 1 RATIONAL	kEXIFFocusDistanceField		= 0x65789206, // 1 RATIONAL	kEXIFMeteringModeField		= 0x65789207, // 1 SHORT	kEXIFLightSourceField		= 0x65789208, // 1 SHORT	kEXIFFlashField				= 0x65789209, // 1 SHORT	kEXIFFocalLengthField		= 0x6578920A, // 1 RATIONAL	kEXIFSensingMethodField		= 0x6578A217, // 1 SHORT	kEXIFDigitalZoomField		= 0x6578A404, // 1 RATIONAL (V3)	kEXIFContrastField			= 0x6578A408, // 1 SHORT (V3)	kEXIFSaturationField		= 0x6578A409, // 1 SHORT (V3)	kEXIFSharpnessField			= 0x6578A40A, // 1 SHORT (V3)		// EXIF-IVIEW fields ........................	kEXIFNoiseReductionField	= 0x6578B001, // 1 SHORT	kEXIFLensField				= 0x6578B002, // n ASCIIs	kEXIFFocusModeField			= 0x6578B003, // 1 SHORT (V3)		// GPS fields .........................	kGPSLatitudeRefField		= 0x06770001, // 2 ASCIIs	kGPSLatitudeField			= 0x06770002, // 3 RATIONALs	kGPSLongitudeRefField		= 0x06770003, // 2 ASCIIs	kGPSLongitudeField			= 0x06770004, // 3 RATIONALs	kGPSAltitudeField			= 0x06770006, // 1 RATIONAL		// iView Structure fields .............//	kTrackInfoListField			= 0x5452434B, // n TrackInfo//	kCuePointInfoListField		= 0x43484150, // n CuePointInfo//	kJPEGPreviewField			= 0x4A504547, // 1 JPEG binary		//////////////////	// CONVERT TO IPTC	//	kMetaLabelField				= 0xA9000001, // 1 ASCII  -> kIPTCLabelField//	kMetaCommentField			= 0xA9000002, // n ASCIIs -> kIPTCCaptionField//	kMetaAuthorField			= 0xA9000003, // n ASCIIs -> kIPTCCreatorField//	kMetaHeadlineField			= 0xA9000004, // n ASCIIs -> kIPTCHeadlineField//	kMetaProductField			= 0xA9000005, // n ASCIIs -> kIPTCTitleField//	kMetaOriginalSourceField	= 0xA9000006, // n ASCIIs -> kIPTCSourceField//	kMetaCopyrightField			= 0xA9000007, // n ASCIIs -> kIPTCCopyrightField//	kMetaURLLinkField			= 0xA9000008, // n ASCIIs -> kIPTCURLField//	kMetaKeywordsField			= 0xA9000009, // n ASCIIs -> kIPTCKeywordField (multiple)			// EXIF ISO fields (not saved) ..............//	kEXIFUserCommentField		= 0x65789286, // n ASCIIs//	kAPEXShutterSpeedField		= 0x65789201, // 1 RATIONAL//	kAPEXApertureField			= 0x65789202, // 1 RATIONAL//	kSpecialISOField			= 0x65789215,  // 1 LONG};////////////////////////////////////////////////////////////////////////////////////////////////////																								//// Folder Stucture On Disk																		////																								////////////////////////////////////////////////////////////////////////////////////////////////////#pragma mark - Forward Declarations// Chunksstatic OSErr 		ReadCatalogChunks(FILE *fp);static void 		ParseMorsels(char * masterData, UInt32 masterSize);static char *		unflattenMorselProc(char *path, void *data, UInt32 dataSize);static char *		unflattenUFieldProc(char *path, void *data, UInt32 dataSize);// File Cellsstatic OSErr 		ReadFolders(FILE *fp, char *path);// File Cellsstatic OSErr 		ReadFileCells(FILE *fp, CellInfo *ci, UInt32 total);static OSErr 		ReadFileBlocks(FILE *fp, CellInfo *ci);static void 		ParseBlockINFO(const UInt32 uid, ItemInfo *in);static void 		ParseBlockIPTC(const UInt32 uid, const Ptr buf, const long len);static void 		ParseBlockEXIF(const UInt32 uid, const Ptr buf, const UInt32 len);// Low Levelstatic OSErr 		myfread(FILE *fp, UInt32 *len, void *val);static OSErr 		myfseek(FILE *fp, int ref, SInt32 len);static OSErr 		ReadAsPtr(FILE *fp, Ptr *p, UInt32 databytes);static char *		UTF8_FROM_UTF8(UInt8 *utf16, size_t utf16len);static char *		UTF8_FROM_UTF16(UInt8 *buf, size_t bufLen);static char *		UTF8_FROM_ASCII(UInt8 *utf16, size_t utf16len);static void 		UnflattenStart(char *flatData, UInt32 flatSize, ListUnflattenProc unflattenProc);static UInt32		UnflattenData(char* path, char* flatData, UInt32 flatSize, bool root, ListUnflattenProc unflattenProc);static const char *	fieldName(UInt32 tag);#endif